---
references:
- id: '7516001'
  type: paper-conference
  author:
  - family: Atzeni
    given: S.
  - family: Gopalakrishnan
    given: G.
  - family: Rakamaric
    given: Z.
  - family: Ahn
    given: D. H.
  - family: Laguna
    given: I.
  - family: Schulz
    given: M.
  - family: Lee
    given: G. L.
  - family: Protze
    given: J.
  - family: Müller
    given: M. S.
  issued:
  - year: '2016'
    month: '5'
  title: 'ARCHER: Effectively Spotting Data Races in Large OpenMP Applications'
  titleshort: ARCHER
  place: Chicago, IL, USA
  containertitle: 2016 IEEE International Parallel and Distributed Processing Symposium
    (IPDPS)
  page: '53-62'
  abstract: OpenMP plays a growing role as a portable programming model to harness
    on-node parallelism, yet, existing data race checkers for OpenMP have high overheads
    and generate many false positives. In this paper, we propose the first OpenMP
    data race checker, ARCHER, that achieves high accuracy, low overheads on large
    applications, and portability. ARCHER incorporates scalable happens-before tracking,
    exploits structured parallelism via combined static and dynamic analysis, and
    modularly interfaces with OpenMP runtimes. ARCHER significantly outperforms TSan
    and Intel Inspector XE, while providing the same or better precision. It has helped
    detect critical data races in the Hypre library that is central to many projects
    at Lawrence Livermore National Laboratory and elsewhere.
  keyword: application program interfaces;parallel processing;program diagnostics;ARCHER;HPC;OpenMP
    application;data race checker;dynamic analysis;high performance computing;static
    analysis;structured parallelism;Benchmark testing;Instruments;Parallel processing;Runtime;Scalability;Synchronization;Xenon;OpenMP;data
    race detection;dynamic analysis;high performance computing;static analysis
  DOI: 10.1109/IPDPS.2016.68
  ISSN: '1530-2075'
  PDF: '7516001.pdf'
  citation: '@inproceedings{7516001,
	Author = {S. Atzeni and G. Gopalakrishnan and Z. Rakamaric and
                  D. H. Ahn and I. Laguna and M. Schulz and G. L. Lee
                  and J. Protze and M. S. M{\"u}ller},
	Booktitle = {2016 {IEEE} {I}nternational {P}arallel and {D}istributed
                  {P}rocessing {S}ymposium ({IPDPS})},
	Doi = {10.1109/IPDPS.2016.68},
	Issn = {1530-2075},
	Keywords = {application program interfaces;parallel
                  processing;program diagnostics;ARCHER;HPC;OpenMP
                  application;data race checker;dynamic analysis;high
                  performance computing;static analysis;structured
                  parallelism;Benchmark testing;Instruments;Parallel
                  processing;Runtime;Scalability;Synchronization;Xenon;OpenMP;data
                  race detection;dynamic analysis;high performance
                  computing;static analysis},
	Month = {May},
	Pages = {53-62},
	Title = {ARCHER: Effectively Spotting Data Races in Large
                  OpenMP Applications},
	Year = {2016}'

- id: '7069300'
  type: paper-conference
  author:
  - family: Protze
    given: J.
  - family: Atzeni
    given: S.
  - family: Ahn
    given: D. H.
  - family: Schulz
    given: M.
  - family: Gopalakrishnan
    given: G.
  - family: Müller
    given: M. S.
  - family: Laguna
    given: I.
  - family: Rakamaric
    given: Z.
  - family: Lee
    given: G. L.
  issued:
  - year: '2014'
    month: '11'
  title: Towards Providing Low-Overhead Data Race Detection for Large OpenMP Applications
  containertitle: 2014 LLVM Compiler Infrastructure in HPC
  page: '40-47'
  place: New Orleans, LA, USA
  abstract: Neither static nor dynamic data race detection methods, by themselves,
    have proven to be sufficient for large HPC applications, as they often result
    in high runtime overheads and/or low race-checking accuracy. While combined static
    and dynamic approaches can fare better, creating such combinations, in practice,
    requires attention to many details. Specifically, existing state-of-the-art dynamic
    race detectors are aimed at low-level threading models, and cannot handle high-level
    models such as OpenMP. Further, they do not provide mechanisms by which static
    analysis methods can target selected regions of code with sufficient precision.
    In this paper, we present our solutions to both challenges. Specifically, we identify
    patterns within OpenMP runtimes that tend to mislead existing dynamic race checkers
    and provide mechanisms that help establish an explicit happens-before relation
    to prevent such misleading checks. We also implement a fine-grained blacklist
    mechanism to allow a runtime analyzer to exclude regions of code at line number
    granularity. We support race checking by adapting ThreadSanitizer, a mature data-race
    checker developed at Google that is now an integral part of Clang and GCC; and
    we have implemented our techniques within the state-of-the-art Intel OpenMP Runtime.
    Our results demonstrate that these techniques can significantly improve runtime
    analysis accuracy and overhead in the context of data race checking of OpenMP
    applications.
  keyword: application program interfaces;message passing;program diagnostics;HPC
    application;OpenMP;ThreadSanitizer;data-race checker;dynamic data race detection;fine-grained
    blacklist mechanism;low-overhead data race detection;runtime analysis accuracy;static
    analysis;static data race detection;Accuracy;Instruction sets;Instruments;Message
    systems;Programming;Runtime;Synchronization
  DOI: '' # 10.1109/LLVM-HPC.2014.7
  URL: http://ieeexplore.ieee.org/document/7069300/
  PDF: '7069300.pdf'
  citation: '@inproceedings{7069300,
  Author = {J. Protze and S. Atzeni and D. H. Ahn and M. Schulz
                  and G. Gopalakrishnan and M. S. M{\"u}ller and
                  I. Laguna and Z. Rakamaric and G. L. Lee},
	Booktitle = {2014 {LLVM} {C}ompiler {I}nfrastructure in {HPC}ß},
	Doi = {10.1109/LLVM-HPC.2014.7},
	Keywords = {application program interfaces;message
                  passing;program diagnostics;HPC
                  application;OpenMP;ThreadSanitizer;data-race
                  checker;dynamic data race detection;fine-grained
                  blacklist mechanism;low-overhead data race
                  detection;runtime analysis accuracy;static
                  analysis;static data race
                  detection;Accuracy;Instruction
                  sets;Instruments;Message
                  systems;Programming;Runtime;Synchronization},
	Month = {Nov},
	Pages = {40-47},
	Title = {{T}owards {P}roviding {L}ow-{O}verhead {D}ata {R}ace {D}etection
                  for {L}arge {O}penMP {A}pplications},
	Year = {2014}'
...
